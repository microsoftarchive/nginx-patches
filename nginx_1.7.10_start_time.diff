*** ngx_http_variables.c	2015-02-10 15:33:35.000000000 +0100
--- ngx_http_variables.c	2015-02-17 14:51:38.000000000 +0100
*************** static ngx_int_t ngx_http_variable_hostn
*** 127,132 ****
--- 127,134 ----
      ngx_http_variable_value_t *v, uintptr_t data);
  static ngx_int_t ngx_http_variable_pid(ngx_http_request_t *r,
      ngx_http_variable_value_t *v, uintptr_t data);
+ static ngx_int_t ngx_http_variable_start_time(ngx_http_request_t *r,
+     ngx_http_variable_value_t *v, uintptr_t data);
  static ngx_int_t ngx_http_variable_msec(ngx_http_request_t *r,
      ngx_http_variable_value_t *v, uintptr_t data);
  static ngx_int_t ngx_http_variable_time_iso8601(ngx_http_request_t *r,
*************** static ngx_http_variable_t  ngx_http_cor
*** 322,327 ****
--- 324,332 ----
      { ngx_string("pid"), NULL, ngx_http_variable_pid,
        0, 0, 0 },
  
+     { ngx_string("start_time"), NULL, ngx_http_variable_start_time,
+       0, 0, 0 },
+ 
      { ngx_string("msec"), NULL, ngx_http_variable_msec,
        0, NGX_HTTP_VAR_NOCACHEABLE, 0 },
  
*************** ngx_http_variable_time_local(ngx_http_re
*** 2222,2227 ****
--- 2227,2253 ----
      return NGX_OK;
  }
  
+ static ngx_int_t
+ ngx_http_variable_start_time(ngx_http_request_t *r,
+     ngx_http_variable_value_t *v, uintptr_t data)
+ {
+     u_char  *p;
+ 
+     p = ngx_pnalloc(r->pool, NGX_INT64_LEN);
+     if (p == NULL) {
+         return NGX_ERROR;
+     }
+ 
+     uint64_t usec = (((uint64_t)r->start_sec * 1000 * 1000) + ((uint64_t)r->start_msec * 1000));
+ 
+     v->len = ngx_sprintf(p, "%L", usec) - p;
+     v->valid = 1;
+     v->no_cacheable = 0;
+     v->not_found = 0;
+     v->data = p;
+ 
+     return NGX_OK;
+ }
  
  void *
  ngx_http_map_find(ngx_http_request_t *r, ngx_http_map_t *map, ngx_str_t *match)
